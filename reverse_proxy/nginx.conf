events {
    worker_connections  1024;
}


http {
    sendfile on;

    upstream docker-visualization {
        server visualization:80;
    }
    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass         http://docker-visualization;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }

    upstream docker-data-provider {
        server data-provider:8080;
    }
    server {
        listen 80;
        server_name data.localhost;

        location / {
            proxy_pass         http://docker-data-provider;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }

    # We resolve the grafana server at request time because
    # the grafana server might not be up and we don't want
    # nginx to crash in that case.
    # Resolving at startup for the other containers for
    # speed reasons.
    server {
        listen 80;
        server_name grafana.localhost;

        location / {
            resolver 127.0.0.11 valid=30s;
            set $upstream_grafana grafana:3000;

            proxy_pass         http://$upstream_grafana;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }
}
